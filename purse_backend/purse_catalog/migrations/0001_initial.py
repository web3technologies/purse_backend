# Generated by Django 4.2.1 on 2023-06-10 23:13

from django.db import migrations, models
from django.core.management import call_command
from django.core.management.commands import loaddata
from django.core.serializers import base, python
import os


def forward_func_plaid(apps, schema_editor):

    old_get_model = python._get_model

    directory = os.path.abspath(os.path.join(os.path.dirname(__file__), "../fixtures"))
    files = [os.path.join(directory, "001_plaid_errors.json")]

    def _get_model(model_identifier):
        try:
            return apps.get_model(model_identifier)
        except (LookupError, TypeError) as exc:
            raise base.DeserializationError(f"Invalid model identifier: '{model_identifier}'") from exc

    python._get_model = _get_model

    try:
        call_command(loaddata.Command(), *files, verbosity=2)
    finally:
        python._get_model = old_get_model


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PlaidApiError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(max_length=255)),
                ('error_code', models.CharField(max_length=255, null=True)),
                ('documentation_link', models.CharField(max_length=255, null=True)),
                ('is_login_required', models.BooleanField(default=False)),
            ],
        ),
        migrations.RunPython(forward_func_plaid, migrations.RunPython.noop),
    ]
