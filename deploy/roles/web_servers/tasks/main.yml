# - name: update repository index (Ubuntu)
#   tags: always
#   apt:
#     update_cache: yes
#     changed_when: false
#     when: ansible_distribution == "Ubuntu"

- name: remove current project dir
  file:
    path: "/applications/purse_backend/"
    state: absent

- name: make project dir
  file:
    path: "/applications/purse_backend/"
    state: directory

- name: make static dir
  file:
    path: "/applications/purse_backend/static/"
    state: directory

- name: make static dir
  file:
    path: "/applications/purse_backend_media/"
    state: directory

- name: unarchive project tar
  unarchive:
    src:  "/tmp/purse_backend.tar"
    dest:  "/"
    copy: True
    list_files: True

- name: install python3 and pip3
  package:
    name:
      - python3-pip
      - python-is-python3
      - python3.10-venv

- name: install postgresql
  package:
    name: 
      - postgresql
      - postgresql-contrib
      - libpq-dev
      - python3-psycopg2
      - acl

- name: create database
  postgresql_db:
    name:  "purse_backend"
  become: true
  become_user: postgres
  when: deploy_env = int

- name: create postgresql user
  postgresql_user:
    name:  "purse_backend"
    password: "db_password"
    db:  "purse_backend"
    expires: infinity
  become: true
  become_user: postgres
  when: deploy_env = int

- name: Make manage.py executable
  file:
    path: /applications/purse_backend/manage.py
    mode: 0777

- name: migrate
  django_manage:
    command: migrate
    app_path: "/applications/purse_backend/"
    settings: "purse_backend.settings.{{ deploy_env }}"
    virtualenv: "/applications/purse_backend/venv"

- name: collect static
  django_manage:
    command: collectstatic
    app_path: "/applications/purse_backend/"
    settings: "purse_backend.settings.{{ deploy_env }}"
    virtualenv: "/applications/purse_backend/venv"

- name: install apache
  package:
    name: 
      - apache2
      - libapache2-mod-wsgi-py3
    state: latest

- name: copy apache config file
  tags: apache,apache3,httpd
  copy:
    src: "{{ apache_config_filename }}"
    dest: "/etc/apache2/sites-available/{{ apache_config_filename }}"
    owner: root
    group: root
    mode: 0644
  notify: restart_apache

- name: Activate site
  shell: "/usr/sbin/a2ensite {{ apache_config_filename }}"
  notify: Reload Apache

- name: start and enable apache service (Ubuntu)
  tags: apache,httpd
  service:
    name: apache2
    state: started
    enabled: yes
  when: ansible_distribution == "Ubuntu"

- name: create celery var and opt directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0777
  loop:
    - /var/log/celery
    - /var/run/celery
    - /opt/celery

- name: create /etc/conf.d dir
  file:
    path: /etc/conf.d
    state: directory

- name: copy celery conf file
  copy:
    src: "celery/celery"
    dest: "/etc/conf.d/celery"
    mode: 0777
  notify: daemon_reload

- name: copy celery service file
  copy:
    src: "celery/celery.service"
    dest: "/etc/systemd/system/celery.service"
    mode: 0777
  notify: daemon_reload

- name: enable celery service
  service:
    name: celery.service
    state: started
    enabled: true

- name: copy celery beat service file
  copy:
    src: "celery/celerybeat.service"
    dest: "/etc/systemd/system/celerybeat.service"
    mode: 0777
  notify: daemon_reload

- name: enable celerybeat service
  service:
    name: celerybeat.service
    state: started
    enabled: true

- name: restart_celery
  service:
    name: celery
    state: restarted